## Include system wide settings which are ignored
## by default if one has their own .inputrc
$include /etc/inputrc

## Read http://vim.wikia.com/wiki/Use_vi_shortcuts_in_terminal
##      for more information related to the vi editing-mode.
## Note that ^L only works in command mode
#set editing-mode vi

$if mode=emacs
    set keymap vi-insert

    ## Edit options before rerunning previous command, eg: ls a b c -> ls -al a b c
    "\C-o": "\e-0eli "

    ## Cycle thru completions.
    "\C-a": menu-complete

    ## glob patterns without executing, eg: 'rm *x'
    "\C-e": glob-expand-word

    ## Vim style history search (Already Default)
    #"\e[A": history-search-backward
    #"\e[B": history-search-forward

    #"\e[C": forward-char
    #"\e[D": backward-char

    ## Two escapes clear command line. (Use C-c or \eC\eC instead)
    "\e\e": "\e0\C-ki"
$endif

# do not make noise
set bell-style none
set expand-tilde on
set convert-meta off
set input-meta on
set output-meta on
set show-all-if-ambiguous on
set visible-stats on

$if Bash
    ## F10 toggles mc on and off
    ## Note Ctrl-o toggles panes on and off in mc
    "\e[21~": "mc\C-M"

    ## do history expansion when space entered
    Space: magic-space
$endif

## By default up/down are bound to previous-history
## and next-history respectively. The following does the
## same but gives the extra functionality where if you
## type any text (or more accurately, if there is any text
## between the start of the line and the cursor),
## the subset of the history starting with that text
## is searched (like 4dos for e.g.).
## Note to get rid of a line just Ctrl-C
"\e[B": history-search-forward
"\e[A": history-search-backward

